//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace RebrickableApi
{
    using System = global::System; using Newtonsoft.Json;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public sealed  partial class RebrickableClient 
    {
        private string _baseUrl = "https://rebrickable.com";
        private System.Net.Http.HttpClient HttpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> Settings;

        public RebrickableClient(System.Net.Http.HttpClient httpClient)
        {
            HttpClient = httpClient;
            Settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        private Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return Settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all Colors.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoColorsListAsync(int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/colors/?");
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Color.
        /// </summary>
        /// <param name="id">A unique value identifying this color.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoColorsReadAsync(string id, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/colors/{id}/?");
            urlBuilder.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Element ID.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoElementsReadAsync(string elementId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (elementId == null)
                throw new System.ArgumentNullException("elementId");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/elements/{elementId}/");
            urlBuilder.Replace("{elementId}", System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of Minifigs.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoMinifigsListAsync(int? page = null, int? pageSize = null, double? minParts = null, double? maxParts = null, string inSetNum = null, string inThemeId = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/minifigs/?");
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inSetNum != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("inSetNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inSetNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inThemeId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("inThemeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inThemeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details for a specific Minifig.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoMinifigsReadAsync(string setNum, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/minifigs/{setNum}/");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all Inventory Parts in this Minifig.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoMinifigsPartsListAsync(string setNum, int? page = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/minifigs/{setNum}/parts/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of Sets a Minifig has appeared in.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoMinifigsSetsListAsync(string setNum, int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/minifigs/{setNum}/sets/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all Part Categories.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoPartCategoriesListAsync(int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/partCategories/?");
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Part Category.
        /// </summary>
        /// <param name="id">A unique integer value identifying this part category.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoPartCategoriesReadAsync(int id, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/partCategories/{id}/?");
            urlBuilder.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of Parts.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoPartsListAsync(int? page = null, int? pageSize = null, string partNum = null, string partNums = null, string partCatId = null, string colorId = null, string bricklinkId = null, string brickowlId = null, string legoId = null, string ldrawId = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/parts/?");
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (partNum != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("partNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (partNums != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("partNums") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partNums, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (partCatId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("partCatId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partCatId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (colorId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("colorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bricklinkId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("bricklinkId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bricklinkId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (brickowlId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("brickowlId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brickowlId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (legoId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("legoId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(legoId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ldrawId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ldrawId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ldrawId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Part.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoPartsReadAsync(string partNum, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (partNum == null)
                throw new System.ArgumentNullException("partNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/parts/{partNum}/");
            urlBuilder.Replace("{partNum}", System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all Colors a Part has appeared in.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoPartsColorsListAsync(string partNum, int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (partNum == null)
                throw new System.ArgumentNullException("partNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/parts/{partNum}/colors/?");
            urlBuilder.Replace("{partNum}", System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Part/Color combination.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoPartsColorsReadAsync(string colorId, string partNum, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (colorId == null)
                throw new System.ArgumentNullException("colorId");

            if (partNum == null)
                throw new System.ArgumentNullException("partNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/parts/{partNum}/colors/{colorId}/");
            urlBuilder.Replace("{colorId}", System.Uri.EscapeDataString(ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{partNum}", System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all Sets the Part/Color combination has appeard in.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoPartsColorsSetsListAsync(string colorId, string partNum, int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (colorId == null)
                throw new System.ArgumentNullException("colorId");

            if (partNum == null)
                throw new System.ArgumentNullException("partNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/parts/{partNum}/colors/{colorId}/sets/?");
            urlBuilder.Replace("{colorId}", System.Uri.EscapeDataString(ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{partNum}", System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of Sets, optionally filtered by any of the below parameters.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LegoSetsListAsyncResponse> LegoSetsListAsync(int? page = null, int? pageSize = null, string themeId = null, double? minYear = null, double? maxYear = null, double? minParts = null, double? maxParts = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/sets/?");
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (themeId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("themeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(themeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return JsonConvert.DeserializeObject<LegoSetsListAsyncResponse>(await response.Content.ReadAsStringAsync());
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details for a specific Set.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoSetsReadAsync(string setNum, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/sets/{setNum}/");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of MOCs which are Alternate Builds of a specific Set - i.e. all parts in the MOC can
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoSetsAlternatesListAsync(string setNum, int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/sets/{setNum}/alternates/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all Inventory Minifigs in this Set.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoSetsMinifigsListAsync(string setNum, int? page = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/sets/{setNum}/minifigs/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all Inventory Parts in this Set.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoSetsPartsListAsync(string setNum, int? page = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/sets/{setNum}/parts/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all Inventory Sets in this Set.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoSetsSetsListAsync(string setNum, int? page = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/sets/{setNum}/sets/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return all Themes
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoThemesListAsync(int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/themes/?");
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return details for a specific Theme
        /// </summary>
        /// <param name="id">A unique integer value identifying this theme.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> LegoThemesReadAsync(int id, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/lego/themes/{id}/?");
            urlBuilder.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> SwaggerListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/swagger/");

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a User Token to be used for authorising user account actions in subsequent calls. Username can be either
        /// </summary>
        /// <param name="username">Username (or email) of user</param>
        /// <param name="password">Password of user</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> Users_tokenCreateAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/Token/");

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (username == null)
                        throw new System.ArgumentNullException("username");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("username", ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
                    if (password == null)
                        throw new System.ArgumentNullException("password");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("password", ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 201)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the available Badges
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersBadgesListAsync(int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/badges/?");
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Badge
        /// </summary>
        /// <param name="id">A unique integer value identifying this badge.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersBadgesReadAsync(int id, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/badges/{id}/?");
            urlBuilder.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the Parts in all the user's Part Lists as well as the Parts inside Sets in the user's Set Lists.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersAllpartsListAsync(string userToken, int? page = null, int? pageSize = null, string partNum = null, double? partCatId = null, double? colorId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/allparts/?");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (partNum != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("partNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (partCatId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("partCatId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partCatId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (colorId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("colorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find out how many parts the user needs to build the specified Set.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersBuildReadAsync(string setNum, string userToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/build/{setNum}/");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the Lost Parts from the user's LEGO collection.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersLostPartsListAsync(string userToken, int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/lostParts/?");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add one or more Lost Parts to the user.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersLostPartsCreateAsync(string userToken, int invPartId, int? lostQuantity = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/lostParts/");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (invPartId == null)
                        throw new System.ArgumentNullException("invPartId");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("invPartId", ConvertToString(invPartId, System.Globalization.CultureInfo.InvariantCulture)));
                    if (lostQuantity != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("lostQuantity", ConvertToString(lostQuantity, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 201)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove the Lost Part from the user.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersLostPartsDeleteAsync(string id, string userToken, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/lostParts/{id}/?");
            urlBuilder.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 204)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the Minifigs in all the user's Sets. Note that this is a read-only list as Minifigs are
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersMinifigsListAsync(string userToken, int? page = null, int? pageSize = null, string figSetNum = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/minifigs/?");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (figSetNum != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("figSetNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(figSetNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the user's Part Lists.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsListAsync(string userToken, int? page = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/?");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new Part List.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsCreateAsync(string userToken, string name, bool? isBuildable = null, int? numParts = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("name", ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
                    if (isBuildable != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("isBuildable", ConvertToString(isBuildable, System.Globalization.CultureInfo.InvariantCulture)));
                    if (numParts != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("numParts", ConvertToString(numParts, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 201)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Part List.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsReadAsync(string listId, string userToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace an existing Part List's details.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsUpdateAsync(string listId, string userToken, string name, bool? isBuildable = null, int? numParts = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("name", ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
                    if (isBuildable != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("isBuildable", ConvertToString(isBuildable, System.Globalization.CultureInfo.InvariantCulture)));
                    if (numParts != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("numParts", ConvertToString(numParts, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing Part List's details.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsPartialUpdateAsync(string listId, string userToken, bool? isBuildable = null, string name = null, int? numParts = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (isBuildable != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("isBuildable", ConvertToString(isBuildable, System.Globalization.CultureInfo.InvariantCulture)));
                    if (name != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("name", ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
                    if (numParts != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("numParts", ConvertToString(numParts, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Part List and all it's Parts.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsDeleteAsync(string listId, string userToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 204)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the Parts in a specific Part List.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsPartsListAsync(string listId, string userToken, int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/parts/?");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add one or more Parts to the Part List.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsPartsCreateAsync(string listId, string userToken, string partNum, int quantity, int colorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/parts/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (partNum == null)
                        throw new System.ArgumentNullException("partNum");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("partNum", ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture)));
                    if (quantity == null)
                        throw new System.ArgumentNullException("quantity");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("quantity", ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)));
                    if (colorId == null)
                        throw new System.ArgumentNullException("colorId");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("colorId", ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 201)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Part in the Part List.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsPartsReadAsync(string colorId, string listId, string partNum, string userToken, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (colorId == null)
                throw new System.ArgumentNullException("colorId");

            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (partNum == null)
                throw new System.ArgumentNullException("partNum");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/parts/{partNum}/{colorId}/?");
            urlBuilder.Replace("{colorId}", System.Uri.EscapeDataString(ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{partNum}", System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace an existing Part's details in the Part List.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsPartsUpdateAsync(string colorId, string listId, string partNum, string userToken, int quantity, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (colorId == null)
                throw new System.ArgumentNullException("colorId");

            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (partNum == null)
                throw new System.ArgumentNullException("partNum");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/parts/{partNum}/{colorId}/?");
            urlBuilder.Replace("{colorId}", System.Uri.EscapeDataString(ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{partNum}", System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (quantity == null)
                        throw new System.ArgumentNullException("quantity");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("quantity", ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Part from the Part List.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartlistsPartsDeleteAsync(string colorId, string listId, string partNum, string userToken, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (colorId == null)
                throw new System.ArgumentNullException("colorId");

            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (partNum == null)
                throw new System.ArgumentNullException("partNum");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/partlists/{listId}/parts/{partNum}/{colorId}/?");
            urlBuilder.Replace("{colorId}", System.Uri.EscapeDataString(ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{partNum}", System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 204)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the Parts in all the user's Part Lists.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersPartsListAsync(string userToken, int? page = null, int? pageSize = null, string partNum = null, double? partCatId = null, double? colorId = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/parts/?");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (partNum != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("partNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (partCatId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("partCatId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partCatId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (colorId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("colorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(colorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific user.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersProfileReadAsync(string userToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/profile/");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the user's Set Lists.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsListAsync(string userToken, int? page = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/?");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new Set List.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsCreateAsync(string userToken, string name, bool? isBuildable = null, int? numSets = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("name", ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
                    if (isBuildable != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("isBuildable", ConvertToString(isBuildable, System.Globalization.CultureInfo.InvariantCulture)));
                    if (numSets != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("numSets", ConvertToString(numSets, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 201)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Set List.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsReadAsync(string listId, string userToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace an existing Set List's details.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsUpdateAsync(string listId, string userToken, string name, bool? isBuildable = null, int? numSets = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("name", ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
                    if (isBuildable != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("isBuildable", ConvertToString(isBuildable, System.Globalization.CultureInfo.InvariantCulture)));
                    if (numSets != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("numSets", ConvertToString(numSets, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing Set List's details.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsPartialUpdateAsync(string listId, string userToken, bool? isBuildable = null, string name = null, int? numSets = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (isBuildable != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("isBuildable", ConvertToString(isBuildable, System.Globalization.CultureInfo.InvariantCulture)));
                    if (name != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("name", ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
                    if (numSets != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("numSets", ConvertToString(numSets, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Set List and all it's Sets.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsDeleteAsync(string listId, string userToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 204)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the Sets in a specific Set List.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsSetsListAsync(string listId, string userToken, int? page = null, int? pageSize = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/sets/?");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add one or more Sets to the Set List. Existing Sets are unaffected.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsSetsCreateAsync(string listId, string userToken, string setNum, int? quantity = null, bool? includeSpares = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/sets/");
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (setNum == null)
                        throw new System.ArgumentNullException("setNum");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("setNum", ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
                    if (quantity != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("quantity", ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)));
                    if (includeSpares != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("includeSpares", ConvertToString(includeSpares, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 201)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Set in the Set List.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsSetsReadAsync(string setNum, string listId, string userToken, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/sets/{setNum}/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace an existing Set's details in the Set List.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsSetsUpdateAsync(string setNum, string listId, string userToken, int? quantity = null, bool? includeSpares = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/sets/{setNum}/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (quantity != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("quantity", ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)));
                    if (includeSpares != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("includeSpares", ConvertToString(includeSpares, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing Set's details in the Set List.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsSetsPartialUpdateAsync(string setNum, string listId, string userToken, int? quantity = null, bool? includeSpares = null, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/sets/{setNum}/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (quantity != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("quantity", ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)));
                    if (includeSpares != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("includeSpares", ConvertToString(includeSpares, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Set from the Set List.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetlistsSetsDeleteAsync(string setNum, string listId, string userToken, string ordering = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNum == null)
                throw new System.ArgumentNullException("setNum");

            if (listId == null)
                throw new System.ArgumentNullException("listId");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/setlists/{listId}/sets/{setNum}/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{listId}", System.Uri.EscapeDataString(ConvertToString(listId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 204)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all the Sets in the user's LEGO collection.
        /// </summary>
        /// <param name="page">A page number within the paginated result set.</param>
        /// <param name="pageSize">Number of results to return per page.</param>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetsListAsync(string userToken, int? page = null, int? pageSize = null, string setNum = null, double? themeId = null, double? minYear = null, double? maxYear = null, double? minParts = null, double? maxParts = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/sets/?");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (page != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (setNum != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("setNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (themeId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("themeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(themeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add one or more Sets to the user's LEGO collection. Existing Sets are unaffected.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetsCreateAsync(string userToken, string setNum, int? quantity = null, bool? includeSpares = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/sets/");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (setNum == null)
                        throw new System.ArgumentNullException("setNum");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("setNum", ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
                    if (quantity != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("quantity", ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)));
                    if (includeSpares != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("includeSpares", ConvertToString(includeSpares, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 201)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Synchronise a user's Sets to the POSTed list.
        /// </summary>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetsSyncCreateAsync(string userToken, string setNum, int? quantity = null, bool? includeSpares = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/sets/sync/");
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (setNum == null)
                        throw new System.ArgumentNullException("setNum");
                    else
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("setNum", ConvertToString(setNum, System.Globalization.CultureInfo.InvariantCulture)));
                    if (quantity != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("quantity", ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)));
                    if (includeSpares != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("includeSpares", ConvertToString(includeSpares, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 201)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get details about a specific Set in the user's LEGO collection.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetsReadAsync(string setNumPath, string userToken, string setNumQuery = null, double? themeId = null, double? minYear = null, double? maxYear = null, double? minParts = null, double? maxParts = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNumPath == null)
                throw new System.ArgumentNullException("setNumPath");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/sets/{setNum}/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNumPath, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (setNumQuery != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("setNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(setNumQuery, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (themeId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("themeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(themeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing Set's quantity in all Set Lists. This PUT call is different to others in that it will create
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetsUpdateAsync(string setNumPath, string userToken, int? quantity = null, string setNumQuery = null, double? themeId = null, double? minYear = null, double? maxYear = null, double? minParts = null, double? maxParts = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNumPath == null)
                throw new System.ArgumentNullException("setNumPath");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/sets/{setNum}/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNumPath, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (setNumQuery != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("setNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(setNumQuery, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (themeId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("themeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(themeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    var keyValues = new System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>();
                    if (quantity != null)
                        keyValues.Add(new System.Collections.Generic.KeyValuePair<string, string>("quantity", ConvertToString(quantity, System.Globalization.CultureInfo.InvariantCulture)));
                    request.Content = new System.Net.Http.FormUrlEncodedContent(keyValues);
                    request.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 200)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the Set from all the user's Set Lists.
        /// </summary>
        /// <param name="ordering">Which field to use when ordering the results.</param>
        /// <param name="search">A search term.</param>
        /// <exception cref="RebrickableApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UsersSetsDeleteAsync(string setNumPath, string userToken, string setNumQuery = null, double? themeId = null, double? minYear = null, double? maxYear = null, double? minParts = null, double? maxParts = null, string ordering = null, string search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (setNumPath == null)
                throw new System.ArgumentNullException("setNumPath");

            if (userToken == null)
                throw new System.ArgumentNullException("userToken");

            var urlBuilder = new System.Text.StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/users/{userToken}/sets/{setNum}/?");
            urlBuilder.Replace("{setNum}", System.Uri.EscapeDataString(ConvertToString(setNumPath, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{userToken}", System.Uri.EscapeDataString(ConvertToString(userToken, System.Globalization.CultureInfo.InvariantCulture)));
            if (setNumQuery != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("setNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(setNumQuery, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (themeId != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("themeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(themeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxYear != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("minParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxParts != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("maxParts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxParts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ordering != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("ordering") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null)
            {
                urlBuilder.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder.Length--;

            var client = HttpClient;
            var disposeClient = false;
            try
            {
                using (var request = new System.Net.Http.HttpRequestMessage())
                {
                    request.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client, request, urlBuilder);

                    var url = urlBuilder.ToString();
                    request.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client, request, url);

                    var response = await client.SendAsync(request, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse = true;
                    try
                    {
                        var headers = System.Linq.Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
                        if (response.Content != null && response.Content.Headers != null)
                        {
                            foreach (var item in response.Content.Headers)
                                headers[item.Key] = item.Value;
                        }

                        ProcessResponse(client, response);

                        var status = (int)response.StatusCode;
                        if (status == 204)
                        {
                            return await response.Content.ReadAsStringAsync();
                        }
                        else
                        {
                            var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new RebrickableApiException("The HTTP status code of the response was not expected (" + status + ").", status, responseData, headers, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse)
                            response.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient)
                    client.Dispose();
            }
        }

        private struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        private async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new RebrickableApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new RebrickableApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RebrickableApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public RebrickableApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RebrickableApiException<TResult> : RebrickableApiException
    {
        public TResult Result { get; private set; }

        public RebrickableApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603